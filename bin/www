#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var models = require('../models');
var debug = require('debug')('ProjectRoomie:server');
var http = require('http');

/**
 * Hooks.
 */

var roomUpdateHook = require('../hooks/room-update');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Sync models to the db and then create HTTP and Socket.IO server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync().then(function () {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * Create two namespaces for the sockets.
 */

var roomieClients = io.of('/roomie');
roomieClients.on('connection', onRoomieConnection);
var webClients = io.of('/web');
webClients.on('connection', onWebConnection);

/**
 * Register event hooks.
 */

roomUpdateHook(webClients);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Event listener for Roomie Socket.IO server "connection" event.
 */

function onRoomieConnection(socket) {
    socket.on('ble tag', function (msg) {
        debug('BLE tag event received: ' + msg);
    });
}

/**
 * Event listener for Web Socket.IO server "connection" event.
 */

function onWebConnection(socket) {

}
